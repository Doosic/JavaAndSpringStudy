* fetch, N 대 1 문제

    * Fetch 란?
        애플리케이션이 DB 로부터 데이터를 가져오는 것
        DB와 통신하여 데이터를 읽는 것에는 큰 비용이 소모되기 때문에, 똑똑하게 가져오는 전략이 필요
        - eager: 프로그램 코드가 쿼리를 날리는 시점에 데이터를 즉시 가져오기
          ex: select a.id from A a inner join B b on a.b_id = b.id (b를 보지 않았지만 일단 다 가져옴)
          select 에 a.id 만을 보지만 b까지 다 가져오는것
        - lazy: 가져오려는 데이터를 애플리케이션에서 실제로 접근할 때 가져오기
          ex: select a.id from A; (select b from B b where b.id = ?)
          select a 만을해서 a를 보다가 a를 통해 b의 정보를 조회할때에 a의 a.id를 통해 b 를 조회하는것
          쿼리는 총2번 날라가지만 쿼리가 날아가기 전까지 애플리케이션에 실제 접근 전까지는 데이터비용을 아낄 수 있다.
        - lazy 전략은 기본적으로
          ORM 의 특징이자 기능적 장점
          더 빠르고 경제적인 쿼리 (적절히만 사용한다면)
          잘못 사용하면 데이터 접근 에러 (ex: LazyInitializationException)


    * fetch 의 기본 전략(default setting)
        각 JPA 연관관계 애노테이션은 기본 fetch 전략을 가지고 있다.
        기본 세팅의 핵심은 "어느 쪽이 효율적인가"
        - @OneToOne: FetchType.EAGER
        - @ManyToOne: FetchType.EAGER
        - @OneToMany: FetchType.LAZY
        - @ManyToMany: FetchType.LAZY

        @ManyToOne
        [Event 는 Place 를 알고있나요? "네"] 알고있다는 것은
        해당 데이터를 언제든지 접근할 수 있는 기능과 니즈가 있다는 것이다.
        @ManyToOne 코드에 들어가본다면 다음과 같이 default 로 EAGER 로 설정되어 있다.
        public @interface ManyToOne { FetchType fetch() default EAGER;}

        @OneToMany
        [반면 Place 는 Event 의 존재를 알고있나요? "아니요"]
        Place 하나에는 Event 가 여러개 달릴수도 있기 때문에 Event 가 발생하려면 Place 가 선행되야한다.
        그러나 Place 는 Event 가 있으나 없으나 그것을 알 필요가 없다.
        @OneToMany 코드에 들어가본다면 다음과 같이 default 로 LAZY 로 설정되어 있다.
        public @interface OneToMany {FetchType fetch() default LAZY;}

        부모 자식의 관계이다. 부모는 자식이 있을수도 있고 없을수도 있으나, 자식은 부모가
        있어야 한다.


    * fetch 전략의 설정
        효율성 - 데이터가 어느 쪽으로 더 자주 사용될 것 같은가 예측
        - default 내버려두기: 필요한 시점에 최선의 방식으로 데이터를 가져옴

        - LAZY 사용: 연관 관계가 있는 엔티티에서 자식 엔티티만 가져오는 시나리오일 때
          프로그래머가 로직 흐름에서 join 을 의식하고 있지 않음
          LAZY 세팅이 후속 쿼리 발생 방지를 보장하지는 않음
            ex: 불러들인 자식 엔티티가 서비스 레이어 어딘가에서 결국 부모 엔티티 필드를 건드렸을 경우

        - EAGER 사용: 연관 관계가 있는 엔티티에서 무조건 다 가져오는 시나리오일 때
          프로그래머가 join 을 사용해야 하는 상황임을 인지하고 있음
          EAGER 세팅이 join 동작을 보장하지는 않음
            ex: Spring Data JPA 쿼리 메소드 findAll()
            JPQL 을 직접 작성해서 join 을 영속성 컨텍스트에 알려줘야 함 (ex: querydsl)

            /*
                Event Entity 의 Place (EAGER fetch)
                    @Setter
                    @ManyToOne(optional = false) // default 셋팅이기에 EAGER fetch
                    private Place place;

                    SpringDataJPA 의 쿼리메서드 findAll() 를 사용하여 조회되는 쿼리 확인시
                    Event 랑 Place 를 조인한 쿼리가 아닌 독립적으로 조회한다.
                    Event 따로 Place 따로 조회

                    이럴때에는 findAll() 이 아닌 JPQL 을 직접 작성해서 join 을 영속성 컨텍스트에 알려줘야 함 (ex: querydsl)
                    N + 1 의 문제가 이런것이다.

                    Hibernate:
                        select
                            event0_.id as id1_2_,
                            event0_.capacity as capacity2_2_,
                            event0_.created_at as created_3_2_,
                            event0_.current_number_of_people as current_4_2_,
                            event0_.event_end_datetime as event_en5_2_,
                            event0_.event_name as event_na6_2_,
                            event0_.event_start_datetime as event_st7_2_,
                            event0_.event_status as event_st8_2_,
                            event0_.memo as memo9_2_,
                            event0_.modified_at as modifie10_2_,
                            event0_.place_id as place_i11_2_
                        from
                            event event0_
                    Hibernate:
                        select
                            place0_.id as id1_3_0_,
                            place0_.address as address2_3_0_,
                            place0_.capacity as capacity3_3_0_,
                            place0_.created_at as created_4_3_0_,
                            place0_.memo as memo5_3_0_,
                            place0_.modified_at as modified6_3_0_,
                            place0_.phone_number as phone_nu7_3_0_,
                            place0_.place_name as place_na8_3_0_,
                            place0_.place_type as place_ty9_3_0_
                        from
                            place place0_
                        where
                            place0_.id=?
                */
                @Test
                void testN1() {
                    List<Event> list = eventRepository.findAll();
                }


    * 나는 한 번 쿼리를 날렸을 뿐인데, 1 + N개의 쿼리가 더 생겼다
        3가지 방법
        - 똑똑한 lazy
          비즈니스 로직을 면밀히 분석하여, 불필요한 연관 관계 테이블 정보를 불러오는 부분을 제거
          가장 똑똑하고 효율적인 방법
          (Event 조회시 Event 만 보고싶은데 Place 를 계속 불러올시 관련코드에서 필요없는 부분을 제거한다)

        - eager fetch + join jpql
          join 쿼리를 직접 작성하는 방법은 다양 (@Query, querydsl, ...)
          쿼리 한 번에 오긴 하겠지만, join 쿼리 연산 비용과 네트워크로 전달되는 데이터가 클 수 있음

        - 후속 쿼리를 in 으로 묶어주기: N + 1 -> 1 + 1 로 I/O 줄일 수 있음
          하이버네이트 프로퍼티: default_batch_fetch_size
          스프링 부트에서 쓰는 법: spring.jpa.properties.hibernate.default_batch_fetch_size
          100 ~ 1000 사이를 추천
          모든 쿼리에 적용되고, 복잡한 도메인에서 join 쿼리를 구성하는 것이 골치아플 때 효율적



    * 실전예시

        public List<EventDTO> getEvents(Predicate predicate) {
                try {
                    return StreamSupport.stream(eventRepository.findAll(predicate).spliterator(), false)
                            .map(EventDTO::of)
                            .collect(Collectors.toList());
                } catch (Exception e) {
                    throw new GeneralException(ErrorCode.DATA_ACCESS_ERROR, e);
                }
            }

        Event 조회에 findAll() 사용시 N + 1 문제 발생. 1개만 조회했으나 쿼리가 4개나 날라감.

        문제 해결방법
        1.Place 와 관련된 파악후 필요없다면 Place 부분을 다 제거한다.
        2.querydsl 을 이용하여 JoinQuery 사용