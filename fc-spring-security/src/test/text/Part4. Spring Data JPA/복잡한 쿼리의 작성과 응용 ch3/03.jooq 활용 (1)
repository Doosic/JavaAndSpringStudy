* jooq 활용 (1)

    - Jooq
      테이블 스키마로부터 자바 코드를 만들어주는 라이브러리
      - 시스템의 설계가 자바 코드(엔티티)가 아닌, DB 에서 시작될 때 유용한 구조

    * Build Gradle 설정

          plugins {
              /*
                6.0.1 은 jooq 버전이 3.15.1 스프링부트에서 자동관리해주는 버전보다 높다.
                5.2.2 사용 권장. 수동설정으로 버전을 맞춰주면 상관없다.
              */
              id 'nu.studer.jooq' version '5.2.2'
          }

          - 버전 자동관리 설정. 변수에 스프링에서 자동으로 설정해준 버전을 넣어준다.
          project.ext {
              querydslVersion = dependencyManagement.importedProperties['querydsl.version']
              jooqVersion = dependencyManagement.importedProperties['jooq.version']
              mysqlVersion = dependencyManagement.importedProperties['mysql.version']
          }

          - Jooq 설정 https://start.spring.io/
          implementation 'org.springframework.boot:spring-boot-starter-jooq'
          jooqGenerator "mysql:mysql-connector-java:${project.mysqlVersion}"

          - GeneratedJooq 파일 생성 위치 설정
          def generatedJooq = 'src/main/generated-jooq'

          - Jooq 세부설정
          jooq {
              // use jOOQ version defined in Spring Boot
              // version = dependencyManagement.importedProperties['jooq.version']
              version = project.jooqVersion

              configurations {
                  main {
                      generationTool {
                          logging = org.jooq.meta.jaxb.Logging.WARN
                          jdbc {
                              driver = 'com.mysql.cj.jdbc.Driver'
                              url = 'jdbc:mysql://172.17.47.198:3306/mygetinline?useSSL=false&allowPublicKeyRetrieval=true'
                              user = 'strou73'
                              password = '1234'
                          }
                          generator {
                              name = 'org.jooq.codegen.JavaGenerator'
                              database{
                                  name = 'org.jooq.meta.mysql.MySQLDatabase'
                                  inputSchema = 'mygetinline'
                                  includes = '.*'
                                  excludes = ''
                                  forcedTypes {
                                      forcedType {
                                          userType = 'com.getinline.getinline.constant.EventStatus'
                                          enumConverter = true
                                          includeExpression = '.*\\.event_status'
                                          includeTypes = '.*'
                                      }
                                      forcedType {
                                          userType = 'com.getinline.getinline.constant.PlaceType'
                                          enumConverter = true
                                          includeExpression = '.*\\.place_type'
                                          includeTypes = '.*'
                                      }
                                  }
                              }
                              generate {
                                  deprecated = false
                                  records = true
                                  immutablePojos = true
                                  fluentSetters = true
                                  javaTimeTypes = true // LocalDateTime 을 자동으로 컨버팅
                              }
                              target {
                                  packageName = 'com.getinline.getinline'
                                  directory = generatedJooq
                              }
                              strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
                          }
                      }
                  }
              }
          }

          - incremental build (증분 빌드) - Jooq 오브젝트 생성 퍼포먼스 향상: 변경점만 적용
          tasks.named('generateJooq').configure {
              allInputsDeclared = true
              outputs.cacheIf{true}
          }