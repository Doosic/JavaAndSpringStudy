
    * SpringBatch 테스트
      1.H2
      2.@SpringBatchTest - JobLauncherTestUtils


    * 설정
      1.build.gradle 에 H2 데이터베이스를 넣어준다.
      2.application.yml 파일에 test 환경일때의 설정을 넣어주고
        test 시에는 h2 데이터 베이스를 사용한다고 명시한다.
      3.test 폴더 밑에 BatchTestConfig 클래스를 생성한다.
      - @SpringBatchTest: 사용시 Batch Test 에서 사용할 수 있는 유용한 스프링 빈을 등록해준다.
      - @SpringBootTest: 실제 애플리케이션을 자신의 로컬 위에 올려서 포트 주소가 Listening 되고, 실제 Database 와 커넥션이 붙는 상태에서 진행되는 Live 테스트 방법
      - @WebMvcTest: Controller 레이어만을 테스트하기에 적합한 테스트 어노테이션으로 전체 애플리케이션 실행이 아닌 Controller 만들 로드하여 테스트가능(소규모 테스트)
      - @ExtendWith(SpringExtension.class): 단위 테스트간에 공통적으로 사용할 기능을 구현하여 @ExtendWith 를 통하여 적용할 수 있는 기능을 제공한다.
      - SpringExtension 은 Spring TestContext 프레임워크를 JUnit 5의 Jupiter 프로그래밍 모델에 통합합니다.
      - @ActiveProfiles("test"): application.yml 에 설정한 test 설정을 여기에 입혀준다. h2database 사용
      - @ContextConfiguration(classes = {HelloJobConfig.class, BatchTestConfig.class}): 스프링 컨텍스트 설정파일을 읽어들인다.

      4.JobLauncherTestUtils 에 대한 잠깐의 설명
        1.Test시에는 필요한 Job을 설정해주어야 한다.
        2.JobLauncherTestUtils 내부에 setJob() 메서드가 있다.
        3.@SpringBootTest를 통해 JobLauncherTestUtils가 오토와이어링 될때에
        4.setJob()을 이용해 Job을 자동으로 와이어링 해준다. (빈 간의 의존성을 자동으로 만족시켜줬다.)
        5.JobConfig가 여러개라면 어떤 Job을 와이어링 해주는가?
        6.@ContextConfiguration(classes = {HelloJobConfig.class, BatchTestConfig.class}): 스프링 컨텍스트 설정파일을 읽어들인다.
          을 통해서 HelloJobConfig.class 로 설정해준다. 만약 이걸 설정해주지 않을시에는
          JobConfig 설정이 여러개 되어있다면 애러가 난다. 꼭 하나를 지정해주자.


        * 오토와이어링이란?
        오토와이어링은 스프링이 빈의 요구 사항과 매칭되는 애플리케이션 컨텍스트상에서 다른 빈을 찾아 빈 간의 의존성을 자동으로 만족시키는 수단이다.
        오토와이어링 수행을 하도록 지정하기 위해서는 @Autowired 애너 테이션을 사용한다.

