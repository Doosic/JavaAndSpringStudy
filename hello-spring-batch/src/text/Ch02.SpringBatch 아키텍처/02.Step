
    * Step
      - 작업의 처리 단위
      - Chunk 기반 스텝, Tasklet 스텝
        2가지로 나뉜다.

        * Chunk 기반 스텝.png 참고
        * ChunkProcessingStep.png 참고

        * 모든 동작은 하나의 트랜잭션 내에서 이루어진다.
        - ItemReader: Step 을 통해 넘어온 아이템들을 읽어들인다.
        - ItemProcessing: 읽어들인 아이템들을 가공해준다.(필요에 따라 생략가능)
        - ItemWriter: 가공된 아이템들을 모아서 트랜잭션 커밋을 해준다.

        - chunkSize: 한 트랜잭션에서 쓸 아이템의 갯수
        - commitInterval : reader 가 한번에 읽을 아이템의 갯수
        - chunkSize >= commitInterval 하지만 보통 같게 맞춰서 사용하는것이 좋다.
          한 트랜잭션에서 쓸 아이템의 갯수보다 reader 가 한번에 읽을 아이템의 갯수가 많은건
          애초에 말이 안된다.

          배치가 10개의 데이터를 가지고 배치 작업을 처리한다 가정해보자.
          보통은 ItemReader 에서 10개를 읽고 10개를 모두 처리하여 ItemProcessor 에서
          10개를 한번에 ItemWriter 넘겨주어 Write 해준다.

          이때 만약 10개의 데이터가 있고 commitInterval 이 chunkSize 보다 작을 경우
          5개씩만 읽을수 있다면 10개를 다 읽을때까지 기다렸다가 ItemWriter 에서 트랜잭션이
          커밋된다.

          @Bean
          public Step sampleStep(PlatformTransactionManager transactionManager) {
            return this.stepBuilderFactory.get("sampleStep")
                    .transactionManager(transactionManager)
                    .<String, String>chunk(10)
                    .reader(itemReader())
                    .writer(itemWriter())
                    .build();
          }
          - ItemReader, ItemProcessor, ItemWriter 구현체를 설정한다.
          - ItemProcessor 는 생략할 수 있다.



        * Tasklet.png 참고
          하나의 트랜잭션 내에서 모든것이 이루어진다.

          @Bean
          public Step step1() {
            return this.stepBuilderFactory.get("step1")
                  .tasklet(myTasklet())
                  .build();
          }
          - Tasklet 구현체를 설정한다. 구현체 내부에서 단순한 읽기,쓰기,처리 로직을 모두 넣는다.
          - RepeatStatus (반복 상태)를 설정한다. 종료는 => RepeatStatus.FINISHED
            아마 무언가 잘 처리되지 않았을때 계속 반복시키는데 사용될것같다.