- @repository

    스프링 스테레오타입 어노테이션
    persistence layer 를 구현하는 클래스에 사용
        - @Component 와 마찬가지로 해당 클래스를 빈으로 등록
        - DAO 패턴을 적용한 클래스에도 사용 가능
        - persistence layer 에서 발생하는 예외를 잡아서 DataAccessException 으로 처리해준다.
            컴포넌트와 구분되는 확실한 차이점은 예외를 잡아 다시 말아서 처리해준다는것이다.
            1.PersistenceExceptionTranslationPostProcessor
        - SpringDataJpa 를 사용한다면, 직접 사용할 일은 없다고 봐도 무방하다.
          JpaRepository 인터페이스를 사용하면 이미 그 구현체인 SimpleJpaRepository
          에 이미 @Repository 어노테이션이 붙어있기 때문에 spring data jpa 를 사용한다면 직접
          사용할일이 없다.


    - Spring Data Jpa 인터페이스
      단계별로 필요한 기능까지만 사용 가능
        - Repository: 기본 repository 인터페이스, 어떤 메소드도 제공하지않는다.
        - CrudRepository: Repository + CRUD 기능 제공
        - PagingAndSortingRepository: CrudRepository + 페이징, 정렬 기능 제공
        - JpaRepository: PagingAndSortingRepository + Spring Data JPA repository 전체 기능


    - Query method
      인터페이스에 작성한 메소드 이름이 곧 쿼리 표현이 됨
        - ex: List<Event>findByEventStatusAndEventNameOrCapacity(String eventStatus,
            eventName, Integer capacity);
        - 다이나믹 쿼리를 만들 수는 없다.
          이건 큰 단점이다... 편하게 사용할 수는 있으나 다이나믹 쿼리가 안된다니....
          // findByEventNameAndEventStatus(null, null) 이렇게 했을때 아무것도 안넣었으니 전체를 다 가져오겠지 하지만
          // 그러지 않는다... => ( select * from event where event_name is null and event_status is null ) 이렇게 검색된다.
        - 사용 가능한 키워드
            - distinct, and, or, is, not, between, lessThan, lessThanEqual, greaterThen, greaterThenEqual
            - null, isNotNull, like, startingWith, endingWith, containing, orderBy, in, true, false, ignoreCase
            - https://docs.spring.io/spring-data/jpa/docs/2.5.5/reference/html/#jpa.query methods.query-creation
            - join 등 복잡한 표현은 불가
        - 참고로 findBy 와 findAllBy 는 같은 기능이다. 다만 표현할때에 All 은 리터럴한 표현이다.
          그냥 다 검색한다 이런 표현이면 더 느낌이와서 있는거 뿐이다.

    - 몇가지 어노테이션들
        - @Param: 쿼리 메소드 입력 파라미터에 사용하여 어노테이션 기반 파라미터 바인딩할 때 사용
          Query method 를 사용할때에 List<Event> findByEventNameAndEventStatus(String eventName, EventStatus eventStatus);
          순서대로 파라미터를 넣어줬다. 그러나 순서가 뒤바껴도 상관없게 넣고싶다면 @Param("eventName") 으로 원하는
          컬럼명을 적어넣어주면 된다. 그렇다면 순서를 바꿔줘도 문제가 안된다!
          List<Event> findByEventNameAndEventStatus(EventStatus eventStatus, @Param("eventName") String eventName);

        - @Query: 직접 JPQL 을 작성하고 싶을 때 사용
          @Query("Select * from event where ....") 직접 사용할 일이 없다.
          사용하게 된다면 혹시 내가 무엇을 잘못하고있는지 먼저 생각한번 해보자. 왠만하면 전부
          query method 로 해결이 다된다.

        - @NoRepositoryBean: 빈으로 등록하고 싶지 않은 인터페이스를 지정할 수 있다.
            1.특정 쿼리 메소드를 기본 메소드로 지정하는 방식으로 운영가능
            2.특정 메소드를 선택적으로 사용하거나 api 에 노출하고자 할 때도 사용하는 테크닉
                언제 안쓰고 싶을까?
                    - 바로 CRUD 를 사용하지 않을때.
                      구현은 Create 만 필요했으나 CRUD 가 전부 구현되어 보안적으로 문제가
                      생길수있을때에 직접 구현하는 방법이 있다.

                    기본적으로 import org.springframework.data.repository.Repository;
                    를 상속받는다면 CrudRepository 를 사용할 수 있는데 그중 Create 관련 기능만 가져와 사용하면 된다.
                    // Repository CRUD 기능을 사용할 수 있으나 선택적으로 사용이 가능하다.

                        @NoRepositoryBean
                        // Repository CRUD 기능을 사용할 수 있으나 선택적으로 사용이 가능하다.
                        public interface EventReadOnlyRepository<T, ID> extends Repository<T, ID> {
                            Optional<T> findById(ID id);
                            List<T> findAll();
                            List<T> findAllById(Iterable<ID> ids);
                            List<T> findAll(Sort sort);
                            Page<T> findAll(Pageable pageable);
                        }




    - Reference
        • https://docs.spring.io/spring-data/jpa/docs/2.5.5/reference/html/#reference
        • https://spring.io/guides/gs/accessing-data-jpa/




