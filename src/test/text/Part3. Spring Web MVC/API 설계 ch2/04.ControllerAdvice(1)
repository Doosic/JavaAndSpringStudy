* ControllerAdvice(1)

    스프링 부트 기본 에러 응답
    1.Whitelabel Error Page
    2.BODY{ status: 500, error: "Internal Server Error"}

    에러 페이지를 뷰와 바디로 나누는 기준.
        Accept => 클라이언트가 서버로부터 응답을 받을수 있는 형태의 힌트를 주는것

        클라이언트가 받을수 있는 자료형이 어떤것이냐에 따라서 BasicErrorController 가
        View 나 JsonBody 를 선택하여 보여준다.


    - whitelabel 페이지는 BasicErrorController 에서 제공하는데 그 조건은 아래와 같다.
      사용자가 만든 Error 컨트롤러가 등록되어 있지 않다면 기본 whitelabel 페이지를 볼 수 있다.
      다르게 말하면 사용자가 Error 컨트롤러를 등록한다면 사용자가 등록한대로 설정할 수 있다.
      * 참고로 error.html 이 path 에 있다면 자동으로 그 페이지가 등록된다.
    @Bean
    	@ConditionalOnMissingBean(value = ErrorController.class, search = SearchStrategy.CURRENT)
    	public BasicErrorController basicErrorController(ErrorAttributes errorAttributes,
    			ObjectProvider<ErrorViewResolver> errorViewResolvers) {
    		return new BasicErrorController(errorAttributes, this.serverProperties.getError(),
    				errorViewResolvers.orderedStream().collect(Collectors.toList()));
    	}


    설정 방법은 아래와 같다.
        @Controller
        public class BaseController implements ErrorController{
            ...
        }




    스프링 부트 기본 에러 응답의 응용

        - BasicErrorController

            스프링부트의 기본 응답이 마음에 든다면
            1.BasicErrorController 를 상속받아서
                - 특정 메서드만 오버라이드 하거나
                - 특정 핸들러 메서드를 추가하는 식으로 응용
            2.BasicErrorController 의 핸들러 메서드
                - BasicErrorController.errorHtml() -> 뷰 응답
                - BasicErrorController.error() -> json body 응답

                - errorHtml 에러 발생시 보내줄 html 페이지를 결정하는곳
            	@RequestMapping(produces = MediaType.TEXT_HTML_VALUE)
            	public ModelAndView errorHtml(HttpServletRequest request, HttpServletResponse response) {
            		HttpStatus status = getStatus(request);
            		Map<String, Object> model = Collections
            				.unmodifiableMap(getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.TEXT_HTML)));
            		response.setStatus(status.value());
            		ModelAndView modelAndView = resolveErrorView(request, response, status, model);
            		return (modelAndView != null) ? modelAndView : new ModelAndView("error", model);
            	}

                - error 응답시 보내줄 body 를 결정하는곳
            	@RequestMapping
            	public ResponseEntity<Map<String, Object>> error(HttpServletRequest request) {
            		HttpStatus status = getStatus(request);
            		if (status == HttpStatus.NO_CONTENT) {
            			return new ResponseEntity<>(status);
            		}
            		Map<String, Object> body = getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.ALL));
            		return new ResponseEntity<>(body, status);
            	}


        - 커스텀 에러 페이지: 기본

            간단히 static html 이나 template 파일을 추가해서 커스텀 페이지를 등록하는 법
            - 단일 기본 페이지
                - /resources/static/error.html
                - /resources/public/error.html
                - /resources/template/error.[탬플릿확장자]
            - http status 별 기본페이지 (4XX의 XX 는 인위적인것이 아닌 4번으로 시작하는 애러를 모두 잡겠다는 것이다)
                - /resources/[static|public|template]/error/{http status 번호}.[html|템플릿확장자]
                - /resources/[static|public|template]/error/4XX.[html|템플릿확장자]
                - /resources/[static|public|template]/error/5XX.[html|템플릿확장자]
=========================================================================================================================================================

    - @ExceptionHandler
        비즈니스 로직이 던진 예외에 반응하는 핸들러 메소드
            - 위치: 특정 컨트롤러 클래스 내부 or @ControllerAdvice 컴포넌트 내부
            - 특정 예외에 반응
            - 예외 처리 범위
                1.컨트롤러 안에 작성했을 경우 : 해당 컨트롤러만
                2.@ControllerAdvice 에 작성했을 경우: 프로젝트 전체

                핸들러 메소드에 속하기 때문에 입출력 자료형도 핸들러 메소드와 유사하지만,
                예외를 입력 인자로 다룰 수 있다는 점이 차이점
                - https://docs.spring.io/spring-framework/docs/current/reference/html/
                web.html#mvc-ann-exceptionhandler-args
                - https://docs.spring.io/spring-framework/docs/current/reference/html/
                web.html#mvc-ann-exceptionhandler-return-values



    - @ControllerAdvice
        @ExceptionHandler 를 모아서 글로벌하게 적용할 때 쓰는 어노테이션
        - 종류
            1.@ControllerAdvice
            2.@RestControllerAdvice = @ControllerAdvice + @ResponseBody
        - 속성 (적용범위를 특정한 범위로 지정할떄 사용하는것)
            1. value == basePackages
            2. basePackages: 적용 범위를 문자열을 이용해 특정 패키지로 지정
            3. basePackageClasses: 적용 범위를 대표 클래스 한 개를 이용해 특정 패키지로 지정
            4. basePackages 를 type-safe 하게 사용하기 위해 제공하는 옵션
            5. assignableTypes: 적용 범위를 특정 클래스에 할당할 수 있는 컨트롤러로 지정
            6. annotations: 적용 범위를 특정 애노테이션을 사용한 컨트롤러로 지정

            @ControllerAdvice(basePackages = "com.get-inline.controller") 다음과 같을시에는
            클래스명이 바뀌거나 패키지명이 바뀌면 애러를 잡을 수 없다. 그래서 쓸수있는 방법중
            basePackagesClasses = BaseController.class 가 있는데
            해당 컨트롤러가 속해있는 페키지 + 하위 페키지까지 모두 속하게 할 수 있다.


        - ResponseEntityExceptionHandler
            Spring MVC 에서 내부적으로 발생하는 예외들을 처리하는 클래스
            1.API 예외 처리를 담당하는 @ControllerAdvice 클래스에서 상속 받아 사용
            2.커스터마이징을 원하는 특정 메소드를 오버라이드



    *** APIDataResponse, APIErrorResponse
        - 회사에서 사용하는 ResponseResult, ResponseResultList, ResponseResultObject 클래스와 같다.
          클래스를 사용하여 어떤값들이 있는지 볼수있는지 그 형태를 정확히 정해주는 것이다.
