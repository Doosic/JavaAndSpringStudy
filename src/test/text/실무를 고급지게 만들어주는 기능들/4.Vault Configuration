* Vault Configuration
    - DB 접근 암호를 어디에 관리할까? (userName, password)
        1.DB 접속 코드에 직접 입력한다
        2.properties 에 입력한다 (그러나 우리의 프로젝트안에 포함되기에 좋은 방법은 아니다)
        3.properties 에 암호화하여 입력한다
        4.별도 DB 에 저장한다
        5.배포 서버에 저장한다 (젠킨스 안쪽에다가 키를 관리할 수 있다)

    - 민감 정보 관리에 사용하는 오픈소스 도구 (https://www.vaultproject.io/)
      비즈니스 도메인을 가지고있는 서비스 시스템과 민감정보를 관리하는 시스템이 분리된다는것.
      가장 중요한 개념이다.

      민감정보를 가져올때에 인증하고, 민감정보를 요청할수 있는 사람인지 권한 체크도 하고.
      데이터를 암호화 하는 기능도 지원해준다.

        1.민감 정보의 저장,관리
        2.민감 정보에 접근하는 인증/권한 관리
        3.데이터 암호화
        4.오픈소스: https://github.com/hashicorp/vault


    - 장점
        1.프로젝트와 민감 정보가 완전히 분리됨
        2.보안성 강화
        3.민감 정보에 접근하고 고객과 공유할 수 있는 다양한 방법을 사용할 수 있음
        4.민감 정보에 접근할 수 있는 권한 관리 가능

    - 단점
        1.설계에 따라, Vault 서버가 죽으면 인증이 안되어 서비스가 중단되는 문제 발생(SPoF)
          (Vault 서버를 도커로 죽으면 다시 살리는 방법을 사용하든 pm2 를 사용하든 하는 방법을 사용하여 별도의 설정으로
          죽으면 살려야 할듯)
        2.초기 러닝 커브
        3.Vault 서버를 별도 운영해야 함

    - 스프링 부트의 Vault 사용 지원
        1.SpringVault: Vault 연동을 위한 기본 기능 지원
            - https://spring.io/project/spring-vault
            - spring-vault-core
        2.Spring Cloud Vault: Vault 가 외부 환경(클라우드)에 있는 경우를 위한 추가적인 지원
            - Vault 각종 설정을 properties 기반으로 조작 가능
            - https://spring.io/projects/spring-cloud-vault
            - spring-cloud-starter-vault-config
            - 이거 쓰면 됨

    - 사용 방법
        build.gradle 에 다음과 같은 설정들을 추가한다.
        꿀팁!)
            vault 또는 다른 라이브러리들을 사용할때에 build.gradle 에 무엇을 추가해야하는지 모를때
                - https://start.spring.io/ 에 접속한다.
                - project 는 자신이 사용할 빌드툴을 선택하고 Dependencies 에서 라이브러리를 선택한다.
                - 화면 하단의 EXPLORE 를 클릭하면 build.gradle 에 설정해야 하는 방법이 나온다.

        1.build.gradle 에 추가한다.
            - implementation 'org.springframework.cloud:spring-cloud-starter-vault-config'
            - ext {set('springCloudVersion', "2020.0.3")}
            - dependencyManagement{imports {
                 mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"}
            }

        2.설정파일 즉, application.properties 또는 yml 에 vault 에 대해서 설정해준다.
        spring:
            application:
                admin: spring-boot-study
            cloud:
              vault:
                scheme: http
                authentication: token
                token: hvs.l8djjt6g2OzsXaCMmox49W6i

        3.Vault 서버 설치
            주의할점!!!!!)
                spring-cloud 의 공식적인 지원이 끝나서 스프링부트의 버전과 클라우드의
                버전이 맞아야한다. boot 2.7 버전부터는 지원하지 않는다.
            1. Vault 공식 홈페이지로 이동: https://www.vaultproject.io/downloads
            2. 운영체제에 맞는 방법을 선택한다 wsl 을 사용한 나는 Linux(Ubuntu/Debian) 로 선택
            설치 명령어들은 따로 적어두지 않는다. 데비안 버전이 올라갈수도 있고 나중에 설치 명령어가 조금 수정될 가능성이 있고
            어느 운영체제에 설치할지에 따라 다르기에. 또한 홈페이지에 너무 간단히 설명이 잘 정리되어있다.

        서버실행)
            실행 명령어 vault server -dev
                1.기본적으로 8200 포트를 사용한다.
                2.다음과같이 접근하기 위한 임시 인증토큰이 발급된다.
                  Root Token: hvs.EkoIneE9Osmb8AvVYBKrJqdt
                3.서버 실행후 http://localhost:8200/ 또는 http://localhost:8200/ui/ 로 접근시
                  편하게 관리할 수 있는 홈페이지가 나온다.
                4.로그인 방식은 토큰으로 콘솔창에 출력된 Root Token 값을 넣어준다.
                5.cubbyhole/ 방식과 secret/ 방식이 있는데 강의와 같이 secret 방식을 사용
                6.Create secret 을 클릭후 불러오고 싶은 정보를 넣어준다.
                    - Path for this secret: spring-boot-study
                    - Secret data
                        spring.datasource.username: ????
                        spring.datasource.password: ????
            중요한점)
                - spring cloud vault 는 vault(server) 에 저장되어 있는 정보를
                  spring.properties 에 등록한다. 이게 무슨말일까? properties 에 있는 값을
                  vault 가 덮어 씌울수 있다는 말이다.
                  그렇기에 우리가 vault 에서 Create secret 에 Secret data 를 넣어줄때에 이름을
                  spring.datasource.username: ????, spring.datasource.password: ???? 다음과 같이 넣어줍니다.

                7.설정 확인 방법
                    ui/console:
                         콘솔로 들어가 Enter 입력시 도움말이 나온다.
                         명령어 : read secret/data/spring-boot-study (값이 나온다)

                    vault 서버에서 명령어 사용:
                         * vault server -dev 로 서버를 기동해야한다.
                         * vault status 로 잘 떴는지 다른 콘솔창을 켜서 확인하자
                            - http: server gave HTTP response to HTTPS client 라는 Error 가 콘솔에 출력시...
                              잘 보면 https 로 요청을 보내는 것을 확인할 수 있다.
                              * 해결법
                                - export VAULT_ADDR='http://127.0.0.1:8200'
                                  Vault 가 실행 중인 호스트 및 포트를 나타내는 환경 변수를 지정해야 한다.

                    토큰 넣어주기:
                            vault server -dev 명령어로 볼트가 실행될때 나오는 토큰값을 properties 또는 yml 설정파일에 넣어준다.

                8.볼트는 최초 애플리케이션 기동시에 딱 한번만 값을 가져온다.
                  왜냐하면 vault 서버가 죽으면 값을 가져올 수 없기때문에 최초 1번만 가져오는 방법으로
                  위험성을 제거한다.
