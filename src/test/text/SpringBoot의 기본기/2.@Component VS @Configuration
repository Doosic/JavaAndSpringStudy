@Component?? VS @Configuration??
    - 실무에 나가보면 햇갈리는 요소들이 있을수가 있다.
      정확한 차이를 한번 알아보자

    - @Component
      "이 클래스는 커스텀 빈이다." 왜냐? 이 클래스를 내가 만들었기 때문이다.
      @Component 와 @Configuration 은 큰 차이는 없습니다.
      @Configuration 의 내부를 살펴보면 @Component 가 정의되어 있다.
      따라서 @Component 와 @Bean 을 비교하는 것이 맞다.
      이곳의 포인트는 Lite Mode 이다.

      1.@ComponentScan -> base package 에서부터 모든 @Component 검색
      2.인스턴스화: 필요한 의존성을 모두 주입
      3.스프링 컨테이너에 등록: 필요한 곳에 주입
        - ComponentScan 으로 SpringBoot 프로젝트가 base package 부터 검색하여
          모든 컴포넌트가 달려있는 클래스들을 찾는다(stereotype (@Controller, @Service, @Repository)이 지정된 클래스들).
          그리고 이것들을 인스턴스화 하고 이때 필요한 내부 의존성들을 모두 주입하고 스프링 컨테이너에 등록을 한다.
          이후 필요한곳에 주입하여준다.

          - 참고: 빈을 만드는 방법 2+1 가지
            1.@Component
            2.@Bean (in @Configuration): proxy Bean 의 설정을 받는다(@AOP)
            3.@Bean (in @Configuration): Lite Mode (proxy Bean 의 설정을 받지 않는다)
                - 컴포넌트 어노테이션과 빈 어노테이션으로 만드는 방법이 있다.

               @Component
               public class BubbleSort <T extends Comparable<T>> implements Sort<T>{
                   @Override
                   public List<T> sort(List<T> list){
                       return output;
                   }
               }

            - proxy Bean 의 설정을 받는다.
               @Configuration
               public class Config {
                   @Bean
                   public Sort<String> bubbleSort() {
                       return new BubbleSort<>();
                   }
               }

            - Lite Mode (proxy Bean 의 설정을 받지 않는다)
               @Component
               public class Config {
                   @Bean
                   public Sort<String> bubbleSort() {
                       return new BubbleSort<>();
                   }
               }

               - 무슨 차이일까?
                    - proxy 라는 개념이 있다.
                      기본적으로 등록되는 빈들을 proxyBean 으로 등록이된다.
                      그래서 나중에 proxy 로 사용할 수 있다. 그런데 Lite Mode 는
                      proxy Bean 을 만들지 않고 그대로 new 를 한다.

                      그런데 이게 왜 더 가벼울까?
                      일반적으로 proxy bean 을 만드는 과정이 일반적인 인스턴스를 만드는 과정보다
                      조금 더 느리다. 그대신 순수한 bean 이기에 proxy bean 이 가진 기능을 사용할 수 없다.
                      @AOP 기능 등... 을 사용 불가

                      이때에는 자기가 스스로 proxy bean 이 필요없다고 판단할 수 있다면 판단하에
                      Lite Mode 를 사용하면된다.


    - 정리
        - @Component
            1.Class-level annotation
            2.등록하려는 빈의 클래스 소스가 편집 가능한 경우 사용
            3.auto-detection 에 걸림
                - 내가 편집하고 싶을때, 내가 편집했기에 컴포넌트도 붙일 수 있다.

        - @Bean
            1.method-level annotation
            2.좀 더 읽기 쉬움
            3.인스턴스화 하는 코드가 수동으로 작성됨
              @Component 로 작성된 코드를 보면 new BubbleSort 라는 코드가 보이지 않는다.
              그러나 @Bean 에서는 직접 new 를 해주어서 인스턴스화를 해주어야 한다.
            4.빈의 인스턴스 코드와 클래스 정의가 분리된 구조
              클래스를 직접 new 로 가져왔으나 실제 구현하는 코드는 따로 분리되어있다.
            5.따라서 외부 라이브러리, 써드 파티 클래스도 빈으로 등록 가능


        - 컴포넌트에 해당하는 스테레오 타입 애노테이션들
            - @Controller
            - @Service
            - @Repository

        - "컴포넌트는 빈이다."


        - @Configuration
            "이 클래스는 각종 빈 설정을 담고 있다."
            1.@SpringBootApplication 이 컴포넌트 스캔을 통해 @Configuration 을 찾아냄
            2.안의 빈 설정(메소드)을 읽어서 스프링 컨테이너에 등록
            3.필요한 곳에 주입
            4.또는 각종 스프링 인터페이스의 구현에 함께 활용


        - 마지막 정리 정확한 차이.
            - Configuration 도 결국은 Component 를 가지고있기에 Component 이다.
            - LiteMode 를 기억하자. (@Configuration 을 사용하면 proxy Bean 설정들이
              입혀지고, @Component 는 LiteMode 로 경량화 되어 proxy Bean 의 설정이 빠진다.

              "애노테이션이 의도에 맞게 사용되었는지 잘 봐주자"
              - 빈 설정은 @Configuration, 클래스 빈 등록은 @Component
                @Configuration 는 각종 빈 설정과 클래스 안의 빈 설정(메소드)을 읽어서 스프링 컨테이너에 등록
                필요한 곳에 주입하여 사용 할 수 있다.

              - 정확한 목적을 모르고 쓰면 "잘 모르겠는데 어쨌든 돌아가요" 운영의 시한폭탄
              - IDE 가 노란 줄 글어주면 허용하지 말자.

        - Real 마지막 정리 ㅋㅋ
            1.@Configuration 은 Bean 을 사용하기 위해서 설정되는 Class 어노테이션이다.
              @Bean 어노테이션 만으로는 스프링에서 등록한 메소드를 찾지 못한다.
              그렇기에 @Configuration 또는 @Component 를 등록한다.
              (methode 를 bean 으로 등록하여 사용하는 형태로 구현된다)

            2.그러나 @Component 로 등록시에는 Lite Mode 가 되어 proxy Bean 으로 생성되지 않아
              proxy 로 사용할 수 없다. (클래스를 Bean 으로 등록하여 사용하는 형태로 구현된다.)

            3.@Configuration 을 사용지 proxy Bean 이 된다.

            4. - 개발자가 직접 작성한 class 를 bean 으로 만들 때 @Component 를 사용한다.
               - 개발자가 직접 작성한 Method 를 통해 반환되는 객체를 사용할 떄 @Bean 을 사용한다.



            https://jojoldu.tistory.com/27 의 글
            @Bean 의 경우 개발자가 컨트롤이 불가능한 외부 라이브러리들을 Bean 으로 등록하고 싶은
            경우에 사용된다.(예를 들면 ObjectMapper 의 인스턴스를 생성하는 메소드를 만들고 해당 메소드에
            @Bean 을 선언하여 Bean 으로 등록한다.)

            반대로 개발자가 직접 컨트롤이 가능한 Class 들의 경우엔 @Component를 사용한다.
