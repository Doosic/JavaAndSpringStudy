debug=false
management.endpoints.web.exposure.include=*
# 로그를 광범위하게 보지않고 일부 패키지로 제한
logging.level.com.getinline.getinline=debug
# api 호출과정을 로그로 관찰하고 싶어서 넣었다.
logging.level.org.springframework.web.servlet=debug
# 로그에서 hibernate 가 작성하는 쿼리문을 보는것(bindingParameter 가 ??? 나오는것을 볼 수 있게 해준다.)
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=trace

# Database
# 스프링부트 2.5 부터는 database 를 inmemory 에 테이블을 만들고 셋팅하려면 initialization 를 true 로 설정해주어야 한다.
spring.jpa.defer-datasource-initialization=true
# Entity 정보를 읽어 테이블을 만든다. h2=> create-dtop, mysql=> create, 배포 => none
# create-drop 은 서버가 내려가면 데이터가 사라진다. create 는 데이터가 남아있어서 디비를 열어 확인이 가능하다.
#spring.jpa.properties.hibernate.default_batch_fetch_size=100

#spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.hibernate.ddl-auto=create
# log에 sql 문장 표출
spring.jpa.show-sql=true
# log에 sql 문장을 좀 더 이쁘게 포맷
spring.jpa.properties.hibernate.format_sql=true
# H2 데이터베이스 콘솔 확인하는 방법
spring.h2.console.enabled=false
# 테스트 db 로 사용하는 방법
#spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.url=jdbc:mysql://172.17.46.153:3306/mygetinline?useSSL=false&allowPublicKeyRetrieval=true
spring.datasource.username=strou73
spring.datasource.password=1234
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# data.sql 을 반영할 수 있다.
spring.sql.init.mode=always

spring.datasource.tomcat.testOnBorrow=true

spring.datasource.tomcat.validationQuery=SELECT 1

# API
spring.data.rest.base-path=/api
#spring.data.rest.detection-strategy=annotated

server.error.whitelabel.enabled=true

spring.mvc.pathmatch.matching-strategy=ant_path_matcher

spring.main.banner-mode=off

# View
spring.thymeleaf.cache=false
spring.thymeleaf3.decoupled-logic=true


