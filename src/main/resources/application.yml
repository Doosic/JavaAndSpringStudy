spring:
  profiles:
    active: local
  batch:
    job:
      # JOBNames를 설지정하지 않을시 모든 Job들이 실행된다.
      names: ${job.name:NONE}

---
spring:
  config:
    activate:
      on-profile: local
  datasource:
    # wsl2는 고정ip가 아니기 때문에 ifconfig를 사용해 할당되는 ip를 계속 바꿔줄것.
    ### 중요!!! ip가 바뀌면 clean 후 install을 다시해줘야한다. 재build 할것 그래야 변경된 ip적용
    url: jdbc:mysql://172.21.224.49:3306/house
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: house
    password: house
  jpa:
    show-sql: true
    # Spring은 EntityScan을 통해 @Entity 애노테이션이 명시한 클래스를 찾는다.
    # spring.jpa.generate-ddl=true 옵션을 true로 설정하면 해당 데이터를 근거로 서버 시작 시점에 DDL문을 생성하여 DB에 적용한다.
    generate-ddl: false
    hibernate:
      # ddl-auto 옵션: none(아무것도 실행하지 않는다.)
      # create-drop: SessionFactory가 시작될 때 데이터 베이스 drop을 실행하고, SessionFactory가 종료될때 drop을 실행(인메모리는 기본값이다.)
      # create: SessionFactory가 시작될 때 데이터베이스 drop을 실행하고 생성된 DDL을 실행한다
      # update: 변경된 스키마를 적용한다
      # validate: 변경된 스키마가 있다면 변경점을 출력하고 애플리케이션을 종료한다
      ddl-auto: none
    defer-datasource-initialization: false
  batch:
    jdbc:
      # SpringBatch schema 생성유무
      initialize-schema: ALWAYS

---
spring:
  config:
    activate:
      # 테스트 환경일때의 설정
      on-profile: test
  jpa:
    # 테스트일때에는 h2 데이터베이스 사용
    database: h2