/*
    알고 넘어가야 할 점!
    dependencies 에 각 라이브러리들의 버전을 명시하지않고 사용하고있다.
    어떻게 가능한걸까?
    id 'io.spring.dependency-management' version '1.0.11.RELEASE' 을 작성해준다면 알아서
    해당 springframework.boot 의 버전에 맞는 라이브러리중 가장 최신버전으로 가져와 적용해주기 때문이다.
    id 'org.springframework.boot' version '2.7.1'
*/
plugins {
    id 'org.springframework.boot' version '2.7.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
//    id 'nu.studer.jooq' version '5.2.2' //6.0.1 은 jooq 버전이 3.15.1 스프링부트에서 자동관리해주는 버전보다 높다.
    id 'java'
    id 'war'
}



group = 'com.get-inline'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

project.ext {
    querydslVersion = dependencyManagement.importedProperties['querydsl.version']
//    jooqVersion = dependencyManagement.importedProperties['jooq.version']
    mysqlVersion = dependencyManagement.importedProperties['mysql.version']
}

dependencies {
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    runtimeOnly 'com.h2database:h2'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.data:spring-data-rest-hal-explorer'
    // https://mvnrepository.com/artifact/org.hibernate.javax.persistence/hibernate-jpa-2.1-api
    implementation group: 'org.hibernate.javax.persistence', name: 'hibernate-jpa-2.1-api', version: '1.0.0.Final'
    runtimeOnly 'mysql:mysql-connector-java'
//    runtimeOnly 'org.postgresql:postgresql'



    // queryDSL 설정 https://start.spring.io/
    implementation "com.querydsl:querydsl-jpa"
    implementation "com.querydsl:querydsl-collections"
    annotationProcessor("jakarta.persistence:jakarta.persistence-api") // java.lang.NoClassDefFoundError(javax.annotation.Entity) 발생 대응
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa" // querydsl JPAAnnotationProcessor 사용 지정
    annotationProcessor "jakarta.annotation:jakarta.annotation-api" // java.lang.NoClassDefFoundError (javax.annotation.Generated) 발생 대응

    // Jooq 설정 https://start.spring.io/
//    implementation 'org.springframework.boot:spring-boot-starter-jooq'
//    jooqGenerator "mysql:mysql-connector-java:${project.mysqlVersion}"
}

tasks.named('test') {
    useJUnitPlatform()
}

// querydsl 적용
def generated='src/main/generated'

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [ generated ]
}

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

//// Heroku 설정
//jar {
//    manifest {
//        attributes('Main-Class': 'com.uno.getinline.GetInLineApplication')
//    }
//}


//def generatedJooq = 'src/main/generated-jooq'
//jooq {
//    // use jOOQ version defined in Spring Boot
////    version = dependencyManagement.importedProperties['jooq.version']
//    version = project.jooqVersion
//
//    configurations {
//        main {
//            generationTool {
//                logging = org.jooq.meta.jaxb.Logging.WARN
//                jdbc {
//                    driver = 'com.mysql.cj.jdbc.Driver'
//                    url = 'jdbc:mysql://172.17.37.139:3306/mygetinline?useSSL=false&allowPublicKeyRetrieval=true'
//                    user = 'strou73'
//                    password = '1234'
//                }
//                generator {
//                    name = 'org.jooq.codegen.JavaGenerator'
//                    database{
//                        name = 'org.jooq.meta.mysql.MySQLDatabase'
//                        inputSchema = 'mygetinline'
//                        includes = '.*'
//                        excludes = ''
//                        forcedTypes {
//                            forcedType {
//                                userType = 'com.getinline.getinline.constant.EventStatus'
//                                enumConverter = true
//                                includeExpression = '.*\\.event_status'
//                                includeTypes = '.*'
//                            }
//                            forcedType {
//                                userType = 'com.getinline.getinline.constant.PlaceType'
//                                enumConverter = true
//                                includeExpression = '.*\\.place_type'
//                                includeTypes = '.*'
//                            }
//                        }
//                    }
//                    generate {
//                        deprecated = false
//                        records = true
//                        immutablePojos = true
//                        fluentSetters = true
//                        javaTimeTypes = true // LocalDateTime 을 자동으로 컨버팅
//                    }
//                    target {
//                        packageName = 'com.getinline.getinline'
//                        directory = generatedJooq
//                    }
//                    strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
//                }
//            }
//        }
//    }
//}

// incremental build (증분 빌드) - Jooq 오브젝트 생성 퍼포먼스 향상: 변경점만 적용
//tasks.named('generateJooq').configure {
//    allInputsDeclared = true
//    outputs.cacheIf{true}
//}

// Source 가 잘 적용되지 않을시에 강제 적용
//sourceSets {
//    main.java.srcDir generatedJooq
//}