/*
    알고 넘어가야 할 점!
    dependencies 에 각 라이브러리들의 버전을 명시하지않고 사용하고있다.
    어떻게 가능한걸까?
    id 'io.spring.dependency-management' version '1.0.11.RELEASE' 을 작성해준다면 알아서
    해당 springframework.boot 의 버전에 맞는 라이브러리중 가장 최신버전으로 가져와 적용해주기 때문이다.
    id 'org.springframework.boot' version '2.7.1'
*/
plugins {
    id 'org.springframework.boot' version '2.7.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'war'
}



group = 'com.get-inline'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    runtimeOnly 'com.h2database:h2'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.data:spring-data-rest-hal-explorer'
    // https://mvnrepository.com/artifact/org.hibernate.javax.persistence/hibernate-jpa-2.1-api
    implementation group: 'org.hibernate.javax.persistence', name: 'hibernate-jpa-2.1-api', version: '1.0.0.Final'
    runtimeOnly 'mysql:mysql-connector-java:8.0.30'
//    runtimeOnly 'org.postgresql:postgresql'



    // queryDSL 설정
    implementation "com.querydsl:querydsl-jpa"
    implementation "com.querydsl:querydsl-collections"
    annotationProcessor("jakarta.persistence:jakarta.persistence-api") // java.lang.NoClassDefFoundError(javax.annotation.Entity) 발생 대응
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa" // querydsl JPAAnnotationProcessor 사용 지정
    annotationProcessor "jakarta.annotation:jakarta.annotation-api" // java.lang.NoClassDefFoundError (javax.annotation.Generated) 발생 대응
}

tasks.named('test') {
    useJUnitPlatform()
}

// querydsl 적용
def generated='src/main/generated'

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [ generated ]
}

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

//// Heroku 설정
//jar {
//    manifest {
//        attributes('Main-Class': 'com.uno.getinline.GetInLineApplication')
//    }
//}