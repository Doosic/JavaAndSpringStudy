* Lombok
    - lombok 이 없으면
        public class Student {
            private String name;
            private Integer age;
            private Grade grade;

            private enum Grade{
                A, B, C, D, F
            }

            public String getName(){
                return name;
            }

            public void setName(String name){
                this.name = name;
            }
            ...........

            @Override
            public boolean equals(Object o){return .....}
            @Override
            public int hashCode(){return ......}
            @Override
            public String ToString(){return .....}

            public static class Student Builder {.........}
        }

        위와 같은 코드가 있다. 여기에 getter, setter 를 lombok 없이 직접 만든다 생각해보자...
        물론 getter, setter 정도는 만들어주는 기능이 있기에 금방 만들 수 있다.
        그런데 동일한 학생 판단이 필요하다고 한다. Equals 와 HashCode 가 필요하다고 한다.
        또 누구는 로그 출력을 깔끔하게 보고싶다고 한다. ToString 을 구현해줘야한다.
        또 누구는 빌더 패턴이 필요하다고 한다...

        - "Never write another getter or equals method again"
          좋은 디자인 패턴을 만들어주기위해서 꾸준히 만들어주지만 계속 반복되는 코드들...
          Boilerplate code 를 줄여주는 도구.
          생산성 향상에 기여 (우리가 집중해야할 서비스 로직에 집중할 수 있다)



    - Lombok 에서 제일 인기 있는 기능들
        - @Data
            - @Getter + @Setter + @RequiredArgsConstructor + @ToString + @EqualsAndHashCode
              @RequiredArgsConstructor = 필수 필드만 생성자를 만들어주는 어노테이션(필수의 기준은 final)
              초기화 되지않은 final 필드, @NonNull 이 붙은 필드를 매개변수로 갖는 생성자를 자동으로 생성한다.
              주로 의존성 주입(DI) 편의성을 높이기 위해 사용된다.
                - final 이 왜 필수가 될까?
                  final 은 변하지 않는 값이다.값이 변하지 않으려면 초기에 값을 들고 있어야되는데 보통 Repository, service 를
                  생성자를 통해 주입할때에 초기값을 new 를 사용해서 직접 만들지 않는다.

            - 편하다
            - 근데 그래서 조심해야 한다 (원하지 않는 기능이나, 모르는 기능이 들어갈 수 있다)

        - @Value
            - 불변 객체를 만들때 씀
            - @Getter @FieldDefaults(makeFinal=true, level=AccessLevel.PRIVATE)
              @AllArgsConstructor @ToString @EqualsAndHashCode.


                - @RequiredArgsConstructor
                  스프링 생성자 주입에 잘 어울려서 애용된다.

        - Lombok 의 위기?
            - 각종 예상치 못한 동작
            - 과도한 애노테이션, 관례 기반 코드 스타일: 동작 예측이 어렵다는 지적
            - 명시적이고 테스트가 쉬운 코드로 회귀하려는 움직임
            - 롬복에서 해방되고 싶다!

            1. 사용자의 의도와 컴파일러의 눈을 피해가는 동작
                1-1)
                    @Data
                    @Builder
                    public class Student{
                        private final String name;
                        private Integer age;
                    }
                    final 을 붙여서 초기값을 꼭 넣고싶고 불변했으면 좋겠다는 생각에 final 을 붙여뒀을것이다.
                    라고 예측을 할 수 있다. 그러나 아래 코드처럼 builder 패턴으로 접근했을때에는 final 이 붙은것과는 다르게
                    name 은 null 값을 줄 것이다.
                    Student martie = Student.builder()
                            .age(25)
                            .build();

                1-2)
                    @Value(staticConstructor = "of")
                    public class Student{
                        private final String name;
                        private Integer weight;
                        private Integer age;
                    }
                    위와 같은 코드가 있을때에 Student fred = Student.of(/*name= */"Fred", /*weight= */70, /*age= */21);

                    Fred 는 70kg에 21살의 나이를 가진채로 생성되었다. 자 그런데 이때에 weight 와 age 를
                    알파벳 순서대로 놓기위해 변수의 위치를 변경했다고 치자... 아래의 코드처럼 Fred 는 21kg 에 70살의 나이를 가진채로 생성되는것이다.
                    이때에 자바에서는 아무런 오류도 뱉어주지 않는다. 둘다 같은 Integer 타입이기 때문에 전혀 문제가 없기 때문이다.
                    이걸 눈치챌 수 있을까....?
                    나중에 수정하는 사람이 알파벳 순서로 정렬해버렸다면? 6개월 뒤의 내가 그랬다면? 바로 버그가 되는것이다.

                    private final String name;
                    private Integer age;
                    private Integer weight;
                    Student fred = Student.of(/*name= */"Fred", /*age= */70, /*weight= */21);

                1-3)
                    @ToString 순환 참조 문제
                    편하게 ToString 을 만들어 줄 수 있는 어노테이션이다.

                    * 다음 코드와 같이 자동차는 시트의 정보들을 리스트화해서 가지고있다.
                    @Data(staticConstructor = "of")
                    @ToString
                    public class Car{
                        private final String name;
                        private List<Seat> seats;
                    }
                    * 그런데 시트도 차의 정보를 가지고있으면 좋을것 같아서 시트에는 차를 넣어줬다.
                      (이렇게 만들 필요는 없으나 예제를 위해서 이렇게 만들어버린것 같다. 서로가 서로를 바라보는(의존하는) 이상한 상황)
                    @AllArgsConstructor(staticName = "of")
                    @ToString
                    public class Seat{
                        private final Car car;
                    }

                    * 이때에 아래와 같은 코드를 실행한다면... 에러가 터진다
                      서로가 서로를 자꾸 참조하려고 하는 문제이다. 카는 시트를 참조하고, 시트는 카를 참조하려하고
                      서로가 서로를 보기위해 자꾸 서로를 참조하며 깊어지며 StackOverFlowError 가 터진다.
                    @Test
                    void test(){
                        Car car = Car.of("My Car");
                        Seat seat = Seat.of(car);
                        car.setSeats(List.of(seat));

                        System.out.println(car);
                    }

                    * 순환참조는 사실 코드를 이렇게 안짜면 되는것이라고 생각하나, Spring Data JPA 를 사용할때에
                      이런 문제가 발생한다고 한다.
                      Entity 클래스를 설계후 내용을 쉽게 보기위해 @ToString 을 달았는데, 관계형 데이터베이스의 특징인
                      다른 테이블과 1:1, 1:Many 로 연결되어있을 수 있고 두개의 테이블이 만약 서로를 볼 수 있는 형태로
                      디자인이 설계되었다면 순환 참조 문제가 발생될 수 있다.

                - Lombok 의 순환참조 문제 해결
                  @ToString(exclude = "car")
                  ToString 에 exclude 라는 옵션을 줄 수 있다 순환참조가 일어나는 필드들의 이름을 넣어준다.
                  순환참조의 문제가 일어나는 필드들의 문제는 해결이 됐으나 다음과 같은 문제가 생긴다.
                  자세히 보기위해 ToString 을 넣어줬으나 Car(name=My Car, seats=[Seat()]) 라는 형식으로 출력된다.
                  한쪽의 값이 뭉뚱그려져서 나오게 되는것이다.

                  또 다른 단점은 exclude 에 필드 이름을 car 로 고정해줬기에 나중에 필드 이름이 바뀌게 된다면
                  알아서 바뀌어 주지 않는다는 문제도 있다.
                  이 부분에 대한건 @ToString.Exclude private final Car car; 과 같은 방법이 나와서
                  클래스명 정도는 변경해주며 약간의 문제를 해소해준다.


        - 그리고?
            - JAVA 14 버전에서 record 라는것이 등장.
                @Value
                public class Student{
                     String name;
                     Integer age;
                     Grade grade;
                }
                private enum Grade{
                    A, B, C, D, E, F;
                }
                ===============================================
                public record Student(
                     String name,
                     Integer age,
                     Grade grade
                ){
                    public static Student of(String name, Integer age, Grade grade){
                        return new Student(name, age, grade);
                    }
                }
                private enum Grade{
                    A, B, C, D, E, F;
                }

                Lombok 같은 경우에는 외부 의존성이다. 그러나 record 를 사용할 시 Lombok 을 사용하지 않기에
                외부 의존성이 하나도 없는 깔끔함을 보여준다. 그리고 getter 의 네이밍 컨벤션의 변화가 왔다.
                fred.getName(); 같은것을 fred.name() 으로 필드명 그대로 사용 할 수 있다.
                그리고 이미 ToString 이 구현되어 있어서 그냥 사용해도 위와같이 뭉뚱그려지지 않은 상태로 잘 출력된다.

                처음에는 아래와 같이 record 를 사용할때에 new 를 사용하여 생성했어야 했으나
                Student fred = new Student(/*name= */"Fred", /*weight= */70, /*age= */21);

                record 에 아래와 같이 넣어준다면 new 도 필요없이 생성할 수 있다.
                public static Student of(String name, Integer age, Grade grade){
                                        return new Student(name, age, grade);
                }
                Student fred = Student.of(/*name= */"Fred", /*weight= */70, /*age= */21);


        - 자잘한 팁과 정리
             - Java 16 과 호환성 문제가 있음 -> 버전 1.18.20 에서 문제 해결
                - Spring Boot 2.4.4 이하는 버전 수동으로 입력해 줄 것
             - Intellij Lombok plugin -> "Enable annotation processor" 자동 적용이라 안 해도 된다.
             - 자동으로 다 해준다 vs. 디테일을 나도 모르게 바꾼다
             - 프로그래밍 세계는 끊임없이 경쟁과 발전 중

