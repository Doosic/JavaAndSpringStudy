* 주요 변경사항
    - Java8 (+Java9) + Spring Framework 5
    - 써드파티 라이브러리 업그레이드
    - Reactive Spring
    - Functional APIs
    - Kotlin 지원
    - Configuration properties
    - Gradle 플러그인
    - Actuator 변경점
    - Spring Security

* 기타 변경사항
    - Spring Boot Properties 변경사항
    - Jackson 시간 표시 기본값
    - MySQL auto_increment
    - HikariCP
    - JOOQ
    - GIF banner



    * 주요 변경사항
        - Java8 (+Java9) + Spring Framework 5
          Java8 이 이제 최소 사양이다
          Java9 공식 최초 지원 - 부트1.x는 미지원
          Spring Framework 5


        - 써드파티 라이브러리 업그레이드
          Tomcat8.5(임베디드), Flyway5, Hibernate5.2, Thymeleaf3, Elasticsearch5.6(검색엔진), Gradle4(설정파일), Jetty9.4, Mockito2.x(버전1 사용불가)


        - Reactive Spring
          사용자 풀이 적은경우, 요청이 적은 경우 SpringWebMVC 가 더 나을 수 있다.
          속도적인 측면의 차이도 거의 없을것이고 코딩하기가 편하다.
          - 무엇을 위해 존재하는가?
            - 한정된 자원 (thread pool) 으로
            - 비동기 (asynchronous) 넌블럭킹(non-blocking) 알고리즘을 이용해
            - 다수의 요청에도 빠르고 예측 가능한 응답 성능(반을)을 실현

          - 리엑티브 지원 모듈
            - Spring WebFlux
            - Reactive Spring Data
            - Reactive Spring Security
            - Embedded Netty Server


        - Functional APIs
          - WebFlux.fn
          - WebMvc.fn(SpringFramework5.2)
          - 기존의 스프링 웹애플리케이션을 함수형 스타일로 작성 가능
          - 스프링 기술과 애노테이션에서 분리된 코드
            - 자바 코드 레벨에서 분석 가능
            - 독립적인 유닛 테스트 가능
            - 스프링 컨테이너에서 독립


        - Configuration properties
            - 프로퍼티를 쓸 때: Relaxed binding 은 여전히 지원
            - 프로퍼티를 읽을 때: 양식이 통일됨
                - 엘리먼트 구분: "."
                - 영어 소문자 + 숫자
                - 단어 구분자로 "-" 사용가능
            - 환경변수(environment variables)에서 컬렉션 데이터의 인덱스 표현 가능
                - MY_VAR_1=a -> my.var[1] = "a"
                - MY_VAR_1_2=b -> my.var[1][2] = "b"
            - 더 편리한 자료형 인식 (ex: java.time.Duration -> "1s", "2m", "5d")
            - Origin 지원: 스프링 부트가 읽은 프로퍼티의 위치를 기억하고, 에러가 나면 알려줌
                - ex: "origin": "class path resource[application.properties]:1:27"


        - Gradle 플러그인
            - 최소버전: 4.x
            - bootRepackage -> bootJar & bootWar
            - dependency management 기능을 사용하려면, 플러그인을 명시해야 함


        - Actuator 변경점
            - 보안성 강화: 1.5에서 기본으로 보여주던 endpoint 를 더 이상 보여주지 않음
            - @EndPoint: 커스텀 endpoint 를 환경(MVC,JMX,Jersey...)에 상관없이 편하게 구현
            - 이름 변화
                - /autoconfig -> /conditions
                - /trace -> /httptrace


        - Spring Security
            - OAuth2.0 통합
            - 커스텀 설정이 더 쉬워짐
            - WebSecurityConfigurerAdapter 순서 문제 해결
                - 기본 설정이 하나로 통합됨
                - WebSecurityConfigurerAdapter 를 추가하면 기본 설정이 꺼짐 (순서문제 해결)
            - 보안이 중요한 기능들은 명시적으로 작성하게끔 변경 (ex: actuator)



    * 기타 변경사항
        - Spring Boot Properties 변경사항
            - 이름과 구성에 변화
            - Spring-boot-properties-migrator
              (이걸 추가할시 현재 패키지가 바뀌었을때 사용자가 바꾸지 않아 문제가 되는 것을 알려준다. 마이그레이션시 도움이 된다.)
            - JdbcTemplate 제어 옵션 추가: spring.jdbc.template.*
            - Redis 제어 옵션 추가: spring.cache.redis.*


        - Jackson 시간 표시 기본값


        - MySQL auto_increment
            - Spring Data JPA, @GeneratedValue strategy 기본 동작이 바뀜
            - 기본값: GenerationType.AUTO
                - Spring Boot 1.5: MySQL AUTO == IDENTITY
                - Spring Boot 2.0: MySQL AUTO == TABLE


        - HikariCP
            - Database 커넥션 풀 관리 프레임워크
            - Tomcat Pool -> HikariCP (성능이 훨씬 뛰어나다)


        - JOOQ
            - Java Object Oriented Querying
            - Datasource 에 맞게 JOOQ dialect 자동 설정
            - @JooqTest 지원
            - 국내에서는 QueryDSL 에 밀리는 분위기 -> QueryDSL 을 쓰자.


        - GIF banner
            - 할 말 없음.